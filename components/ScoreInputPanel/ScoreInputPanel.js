import { createStoreBindings } from 'mobx-miniprogram-bindings';
import { gameStore } from '../../stores/gameStore';

Component({
    /**
     * ÁªÑ‰ª∂ÁöÑÂ±ûÊÄßÂàóË°®
     */
    properties: {

    },

    /**
     * ÁªÑ‰ª∂ÁöÑÂàùÂßãÊï∞ÊçÆ
     */
    data: {
        isVisible: false,
        activePlayerIndex: 0,
        holeInfo: null,
        localScores: [],
        players: [],
        playerItemHeight: 120
    },

    lifetimes: {
        attached() {
            this.storeBindings = createStoreBindings(this, {
                store: gameStore,
                fields: ['gameData', 'players', 'holes', 'scores'],
                actions: ['updateCellScore'],
            });
        },
        detached() {
            this.storeBindings.destroyStoreBindings();
        }
    },

    /**
     * ÁªÑ‰ª∂ÁöÑÊñπÊ≥ïÂàóË°®
     */
    methods: {
        show({ holeIndex, playerIndex }) {
            console.log(`[ScoreInputPanel] Show triggered for Hole: ${holeIndex}, Player: ${playerIndex}`);

            const holeInfo = this.data.holes[holeIndex];
            const players = this.data.players;

            const localScores = players.map((player, pIndex) => {
                const scoreData = this.data.scores[pIndex][holeIndex];
                return {
                    userid: player.userid,
                    score: scoreData.score,
                    putt: scoreData.putt,
                    penalty: scoreData.penalty || 0,
                    sand: scoreData.sand || 0,
                };
            });

            localScores.forEach(score => {
                if (!score.score || score.score === 0) {
                    score.score = holeInfo.par || 0;
                    score.putt = 2;
                }
            });

            this.setData({
                isVisible: true,
                holeInfo: { ...holeInfo, originalIndex: holeIndex },
                players: players,
                localScores: localScores,
                activePlayerIndex: playerIndex,
            });
        },

        hide() {
            this.setData({
                isVisible: false,
                holeInfo: null,
                localScores: [],
            });
        },

        switchPlayer(e) {
            const index = e.currentTarget.dataset.index;
            this._updateScopingAreaPosition(index);
        },

        changeScore(e) {
            const { type, amount } = e.currentTarget.dataset;
            const index = this.data.activePlayerIndex;
            const currentScore = this.data.localScores[index][type] || 0;
            const newValue = currentScore + Number(amount);

            // Á°Æ‰øùÂàÜÊï∞‰∏çÂ∞è‰∫é0
            if (newValue < 0) {
                return;
            }

            this.setData({
                [`localScores[${index}].${type}`]: newValue
            });

            // Ëá™Âä®Êõ¥Êñ∞ÊÄªÊàêÁª©
            if (type !== 'score') {
                this._calculateTotalScore(index);
            }
        },

        _updateScopingAreaPosition(index) {
            this.setData({
                activePlayerIndex: index,
            });
        },

        _calculateTotalScore(playerIndex) {
            const playerScore = this.data.localScores[playerIndex];
            const par = this.data.holeInfo.par || 0;
            // ÊàêÁª© = PAR + ÁΩöÊùÜ + Ê≤ôÂùëËøõÊ¥ûÊï∞(Â¶ÇÊûúÈÄÇÁî®) + ... ËøôÈáåÊöÇÊó∂ÁÆÄÂåñ‰∏∫ PAR + ÁΩöÊùÜ
            // ÂÆûÈôÖÁöÑ "ÊàêÁª©" Â∫îËØ•ÊòØÁî®Êà∑Áõ¥Êé•ËæìÂÖ•ÁöÑÊÄªÊùÜÊï∞ÔºåÂÖ∂‰ªñÊòØËæÖÂä©ÁªüËÆ°„ÄÇ
            // ËøôÈáåÊàë‰ª¨ËÆ© "ÊàêÁª©" Ë∑üÈöèÂÖ∂‰ªñÈ°πÂèòÂåñ
            const totalScore = (playerScore.putt || 0) + (playerScore.penalty || 0);
            // Ëøô‰∏™ÈÄªËæëÈúÄË¶ÅÊ†πÊçÆ‰∫ßÂìÅÈúÄÊ±ÇÁªÜÂåñÔºåÊöÇÊó∂‰ª•Êé®ÊùÜ+ÁΩöÊùÜ‰∏∫‰æã
            // this.setData({
            //     [`localScores[${playerIndex}].score`]: totalScore
            // });
        },

        async _saveChanges() {
            // Â∞Ü localScores ÁöÑÊîπÂä®ÂêåÊ≠•Âõû mobx store
            console.log('üì¶ Saving changes to store:', this.data.localScores);
            const holeIndex = this.data.holeInfo.originalIndex; // ‰ΩøÁî®‰øùÂ≠òÂ•ΩÁöÑÂéüÂßãÁ¥¢Âºï

            if (holeIndex === undefined) {
                console.error("Êó†Ê≥ïËé∑ÂèñÂà∞holeIndexÔºå‰øùÂ≠òÂ§±Ë¥•");
                return;
            }

            for (let i = 0; i < this.data.localScores.length; i++) {
                const playerScore = this.data.localScores[i];
                this.updateCellScore({
                    playerIndex: i,
                    holeIndex: holeIndex,
                    score: playerScore.score,
                    putt: playerScore.putt,
                    penalty: playerScore.penalty,
                    sand: playerScore.sand,
                });
            }
            // ËøôÈáåÂèØ‰ª•Âä†‰∏Ä‰∏™APIË∞ÉÁî®Êù•ÈÄöÁü•ÂêéÁ´Ø
            wx.showToast({ title: 'Â∑≤‰øùÂ≠ò', icon: 'success', duration: 1500 });
        },

        async handleConfirm() {
            await this._saveChanges();
            const currentIndex = this.data.activePlayerIndex;
            const totalPlayers = this.data.players.length;

            if (currentIndex < totalPlayers - 1) {
                // ÂàáÊç¢Âà∞‰∏ã‰∏Ä‰Ωç
                this._updateScopingAreaPosition(currentIndex + 1);
            } else {
                // ÊòØÊúÄÂêé‰∏Ä‰ΩçÔºåÂÖ≥Èó≠Èù¢Êùø
                this.hide();
            }
        },

        handleClear() {
            wx.showModal({
                title: 'Á°ÆËÆ§Ê∏ÖÈô§',
                content: 'Á°ÆÂÆöË¶ÅÊ∏ÖÈô§Êú¨Ê¥ûÊâÄÊúâ‰∫∫ÁöÑÊàêÁª©ÂêóÔºü',
                success: async (res) => {
                    if (res.confirm) {
                        const clearedScores = this.data.localScores.map(item => ({
                            ...item,
                            score: 0,
                            putt: 0,
                            penalty: 0,
                            sand: 0,
                        }));
                        this.setData({ localScores: clearedScores });
                        await this._saveChanges();
                        this.hide();
                    }
                }
            });
        },

        async handleMaskClick() {
            await this._saveChanges();
            this.hide();
        },
    }
}) 