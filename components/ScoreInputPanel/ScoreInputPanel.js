import { createStoreBindings } from 'mobx-miniprogram-bindings';
import { gameStore } from '../../stores/gameStore';
import { scoreStore } from '../../stores/scoreStore';

const app = getApp()
Component({
    /**
     * ÁªÑ‰ª∂ÁöÑÂàùÂßãÊï∞ÊçÆ
     */
    data: {
        isVisible: false,
        activePlayerIndex: 0,
        holeInfo: null,
        localScores: [],
        players: [],
        playerItemHeight: 120,
        isSaving: false
    },

    observers: {
        'isSaving': (newIsSaving) => {
            console.log('üß™ [ScoreInputPanel] isSavingÂèòÂåñÊ£ÄÊµã:', newIsSaving);
        }
    },

    lifetimes: {
        attached() {
            this.storeBindings = createStoreBindings(this, {
                store: gameStore,
                fields: ['gameid', 'groupId', 'gameData', 'players', 'holeList', 'isSaving'],
                actions: ['setSaving'],
            });
            this.scoreStoreBindings = createStoreBindings(this, {
                store: scoreStore,
                fields: ['scores'],
                actions: ['updateCellScore', 'batchUpdateScoresForHole'],
            });
        },
        detached() {
            this.storeBindings.destroyStoreBindings();
            this.scoreStoreBindings.destroyStoreBindings();
        }
    },

    /**
     * ÁªÑ‰ª∂ÁöÑÊñπÊ≥ïÂàóË°®
     */
    methods: {
        show({ holeIndex, playerIndex, unique_key }) {

            // Á±ªÂûãÊ£ÄÊü•Âíå‰øùÊä§
            if (typeof unique_key !== 'string') {
                unique_key = String(unique_key || ''); // Âº∫Âà∂ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
            }

            const holeInfo = this.data.holeList[holeIndex];
            if (!holeInfo) {
                return;
            }

            // Á°Æ‰øù holeInfo.unique_key ‰πüÊòØÂ≠óÁ¨¶‰∏≤
            if (typeof holeInfo.unique_key !== 'string') {
                holeInfo.unique_key = String(holeInfo.unique_key || '');
            }

            const players = this.data.players;
            const gameData = this.data.gameData;

            const localScores = players.map((player, pIndex) => {
                const scoreData = this.data.scores[pIndex][holeIndex];
                return {
                    userid: player.userid,
                    score: scoreData.score,
                    putts: scoreData.putts,
                    penalty_strokes: scoreData.penalty_strokes || 0,
                    sand_save: scoreData.sand_save || 0,
                };
            });

            for (const score of localScores) {
                if (!score.score || score.score === 0) {
                    score.score = holeInfo.par || 0;
                    score.putts = 2;
                }
            }

            this.setData({
                isVisible: true,
                holeInfo: { ...holeInfo, originalIndex: holeIndex, unique_key: unique_key },
                players: players,
                gameData: gameData,
                localScores: localScores,
                activePlayerIndex: playerIndex,
            });
        },

        hide() {

            this.setData({
                isVisible: false,
                holeInfo: null,
                localScores: [],
            });

        },

        switchPlayer(e) {
            const index = e.currentTarget.dataset.index;
            this._updateScopingAreaPosition(index);
        },

        changeScore(e) {
            const { type, amount } = e.currentTarget.dataset;
            const index = this.data.activePlayerIndex;
            const currentScore = this.data.localScores[index][type] || 0;
            const newValue = currentScore + Number(amount);

            if (newValue < 0) return;

            this.setData({
                [`localScores[${index}].${type}`]: newValue
            });
        },

        _updateScopingAreaPosition(index) {
            this.setData({
                activePlayerIndex: index,
            });
        },



        async _saveChanges() {
            if (this.data.isSaving) {
                return false; // Èò≤Ê≠¢ÈáçÂ§çÊèê‰∫§, ËøîÂõûfalseË°®Á§∫Êú™ÊâßË°å‰øùÂ≠ò
            }
            const holeIndexForStore = this.data.holeInfo.originalIndex; // Áî®‰∫éÊõ¥Êñ∞storeÁöÑÊï∞ÁªÑÁ¥¢Âºï
            const holeUniqueKeyForAPI = this.data.holeInfo.unique_key; // Áî®‰∫éÂèëÈÄÅÁªôAPIÁöÑÂîØ‰∏ÄÈîÆ

            if (holeIndexForStore === undefined) {
                return false;
            }


            // 1. ‰øùÂ≠òÊóßÂÄº, Áî®‰∫éÂõûÊªö
            const oldScores = this.data.players.map((_, pIndex) => {
                return { ...this.data.scores[pIndex][holeIndexForStore] };
            });

            this.setSaving(true);


            for (let i = 0; i < this.data.localScores.length; i++) {
                const playerScore = this.data.localScores[i];

                // Ë∞ÉÁî®scoreStoreÁöÑ‰πêËßÇÊõ¥Êñ∞
                this.updateCellScore({
                    playerIndex: i,
                    holeIndex: holeIndexForStore,
                    ...playerScore
                });
            }

            try {
                // 4. Ë∞ÉÁî®API
                const apiData = {
                    gameId: this.data.gameid,
                    groupId: this.data.groupId, // Ê∑ªÂä†ÂàÜÁªÑID
                    holeUniqueKey: holeUniqueKeyForAPI, // ‰ΩøÁî® unique_key ‰Ωú‰∏∫Ê¥ûÁöÑÂîØ‰∏ÄÊ†áËØÜ
                    scores: this.data.localScores,
                };


                // üîß Á¶ÅÁî®APIËá™Â∏¶ÁöÑLoading, ‰ΩøÁî®ÁªÑ‰ª∂Ëá™Â∑±ÁöÑisSavingÁä∂ÊÄÅÁÆ°ÁêÜ
                const result = await app.api.game.saveGameScore(apiData, {
                    showLoading: false // Á¶ÅÁî®APIËá™Â∏¶ÁöÑLoading
                });

                wx.showToast({ title: result.message, icon: 'success', duration: 1500 });
                return true; // ËøîÂõûtrueË°®Á§∫‰øùÂ≠òÊàêÂäü

            } catch (err) {

                // Âº∫Âà∂ÈöêËóèÂèØËÉΩÂç°‰ΩèÁöÑLoading
                try {
                    wx.hideLoading();
                    console.log('üîß [ScoreInputPanel] ÂºÇÂ∏∏Â§ÑÁêÜ‰∏≠Âº∫Âà∂ÈöêËóèLoading');
                } catch (e) {
                    console.log('üîß [ScoreInputPanel] Âº∫Âà∂ÈöêËóèLoadingÂ§±Ë¥•:', e.message);
                }

                wx.showToast({ title: '‰øùÂ≠òÂ§±Ë¥•,Â∑≤Êí§ÈîÄ', icon: 'error' });
                this.batchUpdateScoresForHole({
                    holeIndex: holeIndexForStore,
                    scoresToUpdate: oldScores,
                });
                console.log('üîÑ [ScoreInputPanel] ÂõûÊªöÂÆåÊàê');
                return false; // ËøîÂõûfalseË°®Á§∫‰øùÂ≠òÂ§±Ë¥•

            } finally {
                // 6. Êó†ËÆ∫ÊàêÂäüÂ§±Ë¥•, ÈÉΩÁªìÊùü‰øùÂ≠òÁä∂ÊÄÅ
                this.setSaving(false);

                // 7. Â§öÈáç‰øùÈô©:Âº∫Âà∂ÈöêËóèÂèØËÉΩÊÆãÁïôÁöÑLoading
                try {
                    wx.hideLoading();
                    console.log('üîß [ScoreInputPanel] finallyÂùó‰∏≠Âº∫Âà∂ÈöêËóèLoadingÂÆåÊàê');
                } catch (e) {
                    console.log('üîß [ScoreInputPanel] finallyÂùó‰∏≠Âº∫Âà∂ÈöêËóèLoadingÂ§±Ë¥•(ÂèØËÉΩÊú¨Êù•Â∞±Ê≤°ÊúâLoading):', e.message);
                }

                // 8. È¢ùÂ§ñ‰øùÈô©:Âª∂ËøüÂÜçÊ¨°Ê£ÄÊü•Âπ∂ÈöêËóèLoading
                setTimeout(() => {
                    try {
                        wx.hideLoading();
                    } catch (e) {
                        console.log('üîß [ScoreInputPanel] Âª∂ËøüÂº∫Âà∂ÈöêËóèLoadingÂ§±Ë¥•:', e.message);
                    }
                }, 500);

                // 9. Á≠âÂæÖ‰∏Ä‰∏™ÂæÆ‰ªªÂä°Âë®Êúü, Á°Æ‰øùÁä∂ÊÄÅÊõ¥Êñ∞ÂÆåÊàê
                await new Promise(resolve => setTimeout(resolve, 0));
            }
        },

        async handleConfirm() {

            // üîß Èò≤Ê≠¢ÈáçÂ§çÁÇπÂáª:Â¶ÇÊûúÊ≠£Âú®‰øùÂ≠ò, Áõ¥Êé•ËøîÂõû
            if (this.data.isSaving) {
                return;
            }

            try {
                const saveResult = await this._saveChanges();
                if (saveResult === false) {
                    return; // ‰øùÂ≠òÂ§±Ë¥•ÊàñË¢´Ë∑≥Ëøá, ‰∏çÂÖ≥Èó≠Èù¢Êùø
                }
                console.log('‚úÖ [ScoreInputPanel] _saveChanges ÊâßË°åÊàêÂäü');
            } catch (error) {
                return; // Â¶ÇÊûú‰øùÂ≠òÂ§±Ë¥•, ‰∏çÊâßË°åÂêéÁª≠Êìç‰Ωú
            }

            // üîß ‰øùÂ≠òÊàêÂäüÂêéÁõ¥Êé•ÂÖ≥Èó≠Èù¢Êùø
            this.hide();
        },

        handleClear() {
            // üîß Èò≤Ê≠¢Âú®‰øùÂ≠òËøáÁ®ã‰∏≠ÊâßË°åÊ∏ÖÈô§Êìç‰Ωú
            if (this.data.isSaving) {
                wx.showToast({ title: 'ËØ∑Á®çÂêéÂÜçËØï', icon: 'none' });
                return;
            }

            wx.showModal({
                title: 'Á°ÆËÆ§Ê∏ÖÈô§',
                content: 'Á°ÆÂÆöË¶ÅÊ∏ÖÈô§Êú¨Ê¥ûÊâÄÊúâ‰∫∫ÁöÑÊàêÁª©ÂêóÔºü',
                success: async (res) => {
                    if (res.confirm) {
                        // üîß ÂÜçÊ¨°Ê£ÄÊü•‰øùÂ≠òÁä∂ÊÄÅ, Èò≤Ê≠¢Áî®Êà∑Âú®ÂºπÁ™óÊúüÈó¥Ëß¶Âèë‰∫ÜÂÖ∂‰ªñ‰øùÂ≠òÊìç‰Ωú
                        if (this.data.isSaving) {
                            wx.showToast({ title: 'ËØ∑Á®çÂêéÂÜçËØï', icon: 'none' });
                            return;
                        }

                        const clearedScores = this.data.localScores.map(item => ({
                            ...item,
                            score: 0,
                            putts: 0,
                            penalty_strokes: 0,
                            sand_save: 0,
                        }));
                        this.setData({ localScores: clearedScores });

                        try {
                            const saveResult = await this._saveChanges();
                            if (saveResult !== false) {
                                this.hide(); // Âè™Êúâ‰øùÂ≠òÊàêÂäüÊâçÂÖ≥Èó≠Èù¢Êùø
                            }
                        } catch (error) {
                            console.error('‚ùå [ScoreInputPanel] Ê∏ÖÈô§Âêé‰øùÂ≠òÂ§±Ë¥•:', error);
                        }
                    }
                }
            });
        },

        async handleMaskClick() {
            this.hide();
        },

        // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°ÁöÑÁ©∫ÊñπÊ≥ï
        preventBubble() {
            // Á©∫ÊñπÊ≥ï, Áî®‰∫éÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
        },
    }
}) 