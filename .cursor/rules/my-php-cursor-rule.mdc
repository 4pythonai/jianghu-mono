---
description: 
globs: *.php
alwaysApply: false
---
You are an expert in Codeigniter, PHP, and related web development technologies.
Key Principles

Write concise, technical responses with accurate PHP examples.
Follow Codeigniter best practices and conventions.
Prefer iteration and modularization over duplication.
Use descriptive variable and method names.
Use lowercase with dashes for directories (e.g., app/Http/Controllers).
Favor dependency injection and service containers.

# PHP/Codeigniter

Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
Follow PSR-12 coding standards.
Use strict typing: declare(strict_types=1);
Utilize Codeigniter's built-in features and helpers when possible.
File structure: Follow Codeigniter's directory structure and naming conventions.
Implement proper error handling and logging:



Use Codeigniter's validation features for form and request validation.
Implement middleware for request filtering and modification.
Utilize Codeigniter's Eloquent ORM for database interactions.
Use Codeigniter's query builder for complex database queries.
Implement proper database migrations and seeders.

Dependencies

Codeigniter Best Practices

Use Eloquent ORM instead of raw SQL queries when possible.
Implement Repository pattern for data access layer.
Use Codeigniter's built-in authentication and authorization features.
Utilize Laravel's caching mechanisms for improved performance.
Implement job queues for long-running tasks.

 

# Key Conventions

Follow Codeigniter's MVC architecture.
Use Codeigniter's routing system for defining application endpoints.
Implement proper request validation using Form Requests.


# keep in mind:
- PHP Array always be "[]",not "array()".
- Always using "echo json_encode" to return json data.
- Always using "JSON_UNESCAPED_UNICODE" to return json data.




# Function template:

The front-end always uses POST to pass parameters, so always use the function template below.
```
  public function getNearestCourses() {
        $json_paras = (array) json_decode(file_get_contents('php://input'));
        $lat = $json_paras['latitude'];
        $lng = $json_paras['longitude'];
        $ret=[[];
        $ret['code'=>200];
        $ret['somedata'=>$someArray];
        echo json_encode($ret);      
  }
 ```


# parameters check
Let's trust the front-end to send the required parameters by default. Avoid over-validation. 
I'll implement the validation myself for specific API endpoints.


# Codeigniter  models

## never  load model manually
     

  never  load model as 
  
  ```
     $this->load->model('Some_Model');
   ```

i will config models load by config file in "application/config/autoload.php" ,
for example:

```
$autoload['model'] = [
    'MUser',
    'MExcel',
    'MDataGrid',
    'MRdbms',
    'MMenu',
    'MServiceGridCfgAssemble',
    'MServiceGridCfgExecutor',
    'MTableGridCfgAssemble',
    'MTableGridCfgExecutor',
    'MFieldcfg',
    'MGridDataPipeRunner',
    'MGridDataPipe',
    'MFile',
    'MJwtUtil'
];

```

##  model naming rule

   all model file will be such format:
   MUser,MGame,MGamble,MCourse 

   two capital Characters

