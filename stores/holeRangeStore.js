// holeRangeStore - Ê¥ûËåÉÂõ¥ÁÆ°ÁêÜ Store
import { observable, action } from 'mobx-miniprogram'
import { normalizeHole } from '../utils/gameUtils'

/**
 * Ê¥ûËåÉÂõ¥ÁÆ°ÁêÜ Store
 * Ë¥üË¥£ÁÆ°ÁêÜÊ¥û‰ø°ÊÅØ„ÄÅÊ¥ûÈ°∫Â∫è„ÄÅÊ¥ûËåÉÂõ¥Á≠âÊâÄÊúâÊ¥ûÁõ∏ÂÖ≥ÁöÑÁä∂ÊÄÅ
 */
export const holeRangeStore = observable({
    // ---- Ê¥ûÁõ∏ÂÖ≥Áä∂ÊÄÅ ----
    holeList: [],           // Ê¥û‰ø°ÊÅØÂàóË°®ÔºàÂéüÂßãÊ¥ûÊï∞ÊçÆÔºâ
    holePlayList: [],       // Ê¥ûÈ°∫Â∫èÂàóË°®ÔºàÊåâÊ∏∏ÊàèÈ°∫Â∫èÊéíÂàóÔºâ
    scoreStartIndex: null,
    roadLength: 0,

    /**
     * ÂàùÂßãÂåñÊ¥ûÊï∞ÊçÆ
     * @param {Array} holeList ÂéüÂßãÊ¥ûÊï∞ÊçÆ
     */
    initializeHoles: action(function (holeList) {
        console.log('üï≥Ô∏è [holeRangeStore] ÂàùÂßãÂåñÊ¥ûÊï∞ÊçÆ:', holeList?.length);

        if (!holeList || !Array.isArray(holeList)) {
            console.warn('üï≥Ô∏è [holeRangeStore] Êó†ÊïàÁöÑÊ¥ûÊï∞ÊçÆ');
            return;
        }

        // Ê†áÂáÜÂåñÊ¥ûÊï∞ÊçÆ
        const normalizedHoles = holeList.map((h, index) => normalizeHole(h, index + 1));

        this.holeList = normalizedHoles;
        this.holePlayList = JSON.parse(JSON.stringify(normalizedHoles));
        this.roadLength = normalizedHoles.length;


        if (normalizedHoles.length > 0) {
            this.scoreStartIndex = normalizedHoles[0].hindex;
        }
    }),

    /**
     * ËÆæÁΩÆÊ¥ûËåÉÂõ¥ÔºàÂèÇ‰∏éÊ∏∏ÊàèÁöÑÊ¥ûÔºâ
     * @param {number} startHoleindex Ëµ∑ÂßãÊ¥ûÁ¥¢Âºï
     */
    setHoleRange: action(function (startHoleindex) {
        console.log('üï≥Ô∏è [holeRangeStore] ËÆæÁΩÆËµ∑ÂßãÊ¥û:', startHoleindex);
        this.scoreStartIndex = Number.parseInt(startHoleindex);
    }),

    setRoadLength: action(function (roadLength) {
        console.log('‚≠ïÔ∏è‚≠ïÔ∏è‚≠ïÔ∏è‚≠ïÔ∏è [holeRangeStore] ËÆæÁΩÆÈÅìË∑ØÈïøÂ∫¶:', { roadLength });
        this.roadLength = roadLength;
    }),

    /**
     * Êõ¥Êñ∞Ê¥ûÈ°∫Â∫èÂàóË°®ÔºàÁî®‰∫éÊãñÊãΩÊéíÂ∫èÂêéÔºâ
     * @param {Array} newHolePlayList Êñ∞ÁöÑÊ¥ûÈ°∫Â∫èÂàóË°®
     */
    updateHolePlayList: action(function (newHolePlayList) {
        this.holePlayList = [...newHolePlayList];
        this.roadLength = newHolePlayList.length;
    }),

    /**
     * ‰ªéÂ≠óÁ¨¶‰∏≤Ëß£ÊûêÂπ∂ËÆæÁΩÆÊ¥ûÈ°∫Â∫èÂàóË°®
     * @param {string} holePlayListStr Ê¥ûÈ°∫Â∫èÂ≠óÁ¨¶‰∏≤ÔºåÊ†ºÂºèÔºö"1,2,3,4"
     */
    setHolePlayListFromString: action(function (holePlayListStr) {
        console.log('üï≥Ô∏è [holeRangeStore] ‰ªéÂ≠óÁ¨¶‰∏≤Ëß£ÊûêÊ¥ûÈ°∫Â∫è:', holePlayListStr);

        if (!holePlayListStr || typeof holePlayListStr !== 'string') {
            console.warn('üï≥Ô∏è [holeRangeStore] Êó†ÊïàÁöÑÊ¥ûÈ°∫Â∫èÂ≠óÁ¨¶‰∏≤');
            return;
        }

        try {
            // Ëß£ÊûêÊ¥ûÁ¥¢ÂºïÂ≠óÁ¨¶‰∏≤
            const holeIndexes = holePlayListStr.split(',').map(index => Number.parseInt(index.trim()));

            // Ê†πÊçÆÁ¥¢ÂºïÊü•ÊâæÂØπÂ∫îÁöÑÊ¥ûÊï∞ÊçÆ
            const newHolePlayList = holeIndexes.map(hindex => {
                const hole = this.holeList.find(h => h.hindex === hindex);
                if (!hole) {
                    console.warn(`üï≥Ô∏è [holeRangeStore] Êâæ‰∏çÂà∞Ê¥ûÁ¥¢Âºï ${hindex} ÁöÑÊï∞ÊçÆ`);
                    return null;
                }
                return hole;
            }).filter(hole => hole);

            // Êõ¥Êñ∞Ê¥ûÈ°∫Â∫èÂàóË°®
            this.updateHolePlayList(newHolePlayList);

            console.log('üï≥Ô∏è [holeRangeStore] Ê¥ûÈ°∫Â∫èËß£ÊûêÂÆåÊàê:', {
                originalString: holePlayListStr,
                parsedHoles: newHolePlayList.length,
                roadLength: this.roadLength
            });

        } catch (error) {
            console.error('üï≥Ô∏è [holeRangeStore] Ëß£ÊûêÊ¥ûÈ°∫Â∫èÂ≠óÁ¨¶‰∏≤Â§±Ë¥•:', error);
        }
    }),

    /**
     * ÈáçÁΩÆÊ¥ûËåÉÂõ¥Âà∞ÈªòËÆ§Áä∂ÊÄÅ
     */
    resetHoleRange: action(function () {
        console.log('üï≥Ô∏è [holeRangeStore] ÈáçÁΩÆÊ¥ûËåÉÂõ¥Âà∞ÈªòËÆ§Áä∂ÊÄÅ');

        if (this.holeList.length > 0) {
            this.scoreStartIndex = this.holeList[0].hindex;
            this.roadLength = this.holeList.length;
            this.holePlayList = JSON.parse(JSON.stringify(this.holeList));
        } else {
            this.scoreStartIndex = null;
            this.roadLength = 0;
            this.holePlayList = [];
        }
    }),

    /**
     * Ëé∑ÂèñÂΩìÂâçÁä∂ÊÄÅ
     */
    getState() {
        return {
            holeList: this.holeList,
            holePlayList: this.holePlayList,
            startHoleindex: this.scoreStartIndex,
            roadLength: this.roadLength
        };
    }
}); 